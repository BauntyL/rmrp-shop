import React from "react";
import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { apiRequest } from "@/lib/queryClient";
import { useAuth } from "@/hooks/useAuth";
import { Dialog, DialogContent } from "@/components/ui/dialog";
import { useToast } from "@/hooks/use-toast";
import StepWizard from "@/components/step-wizard";
import { ListingStep1, ListingStep2, ListingStep3 } from "@/components/steps";

const createListingSchema = z.object({
  title: z.string().min(1, "–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ"),
  description: z.string().min(10, "–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤"),
  price: z.coerce.number().min(1, "–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0"),
  categoryId: z.coerce.number().min(1, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é"),
  subcategoryId: z.coerce.number().optional(),
  serverId: z.coerce.number().min(1, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä"),
  imageUrl: z.string().url("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ").optional().or(z.literal("")),
  metadata: z.object({
    contacts: z.object({
      discord: z.string().optional(),
      telegram: z.string().optional(),
      phone: z.string().optional(),
    })
  }).optional(),
});

type CreateListingFormData = z.infer<typeof createListingSchema>;

interface CreateListingModalProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
}

export default function CreateListingModal({ open, onOpenChange }: CreateListingModalProps) {
  const { user } = useAuth();
  const { toast } = useToast();
  const queryClient = useQueryClient();

  const { data: categories = [] } = useQuery({
    queryKey: ["/api/categories"],
  });

  const { data: servers = [] } = useQuery({
    queryKey: ["/api/servers"],
  });

  const form = useForm<CreateListingFormData>({
    resolver: zodResolver(createListingSchema),
    defaultValues: {
      title: "",
      description: "",
      price: 0,
      categoryId: 0,
      subcategoryId: undefined,
      serverId: 0,
      imageUrl: "",
      metadata: {
        contacts: {
          discord: "",
          telegram: "",
          phone: "",
        }
      },
    },
  });

  const createListingMutation = useMutation({
    mutationFn: async (data: CreateListingFormData) => {
      const productData = {
        ...data,
        images: data.imageUrl ? [data.imageUrl] : [],
      };
      const response = await apiRequest("POST", "/api/products", productData);
      return response.json();
    },
  });

  const handleComplete = async (data: any) => {
    try {
      console.log('üöÄ Starting to create listing with data:', JSON.stringify(data, null, 2));
      
      const productData = {
        ...data,
        images: data.imageUrl ? [data.imageUrl] : [],
      };
      
      console.log('üì¶ Prepared product data:', JSON.stringify(productData, null, 2));
      
      const response = await apiRequest("POST", "/api/products", productData);
      console.log('üì° Server response status:', response.status);
      
      const result = await response.json();
      console.log('‚úÖ Server response data:', JSON.stringify(result, null, 2));
      
      toast({
        title: "–û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ",
        description: "–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é",
      });
      onOpenChange(false);
      queryClient.invalidateQueries({ queryKey: ["/api/products"] });
    } catch (error: any) {
      console.error('‚ùå Error creating listing:', error);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: error.message || "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ",
        variant: "destructive",
      });
      throw error;
    }
  };

  const steps = [
    {
      id: "step1",
      title: "–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
      description: "–ö–∞—Ç–µ–≥–æ—Ä–∏—è, –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞",
      component: <ListingStep1 data={{}} onDataChange={() => {}} onValidationChange={() => {}} />,
      isValid: true
    },
    {
      id: "step2",
      title: "–î–µ—Ç–∞–ª–∏ —Ç–æ–≤–∞—Ä–∞",
      description: "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
      component: <ListingStep2 data={{}} onDataChange={() => {}} onValidationChange={() => {}} />,
      isValid: true
    },
    {
      id: "step3",
      title: "–ö–æ–Ω—Ç–∞–∫—Ç—ã, —Ü–µ–Ω–∞ –∏ —Å–µ—Ä–≤–µ—Ä",
      description: "–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, —Ü–µ–Ω–∞ –∏ –≤—ã–±–æ—Ä —Å–µ—Ä–≤–µ—Ä–∞",
      component: <ListingStep3 data={{}} onDataChange={() => {}} onValidationChange={() => {}} />,
      isValid: true
    }
  ];

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-5xl max-h-[95vh] overflow-y-auto bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 border border-violet-500/20 text-white shadow-2xl shadow-violet-500/10">
        <StepWizard
          steps={steps}
          form={form}
          onComplete={handleComplete}
          isLoading={createListingMutation.isPending}
          category="listing"
          additionalProps={{ servers, categories }}
        />
      </DialogContent>
    </Dialog>
  );
}
